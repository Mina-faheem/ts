
name: Trivy Full Scan prome

on:
  push:
    branches: [main]
  pull_request:

jobs:
  trivy-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Trivy
        uses: aquasecurity/setup-trivy@v0.2.1
        with:
          trivy-version: '0.56.1'

      - name: Cache Trivy binary
        uses: actions/cache@v4
        with:
          path: ~/.local/bin/trivy-bin
          key: trivy-binary-v0.56.1-Linux-X64

      - name: Build Docker image
        run: docker build -t my-app:${{ github.sha }} .

      - name: Trivy Image Scan
        run: |
          mkdir -p trivy-results
          trivy image --format json --output trivy-results/image.json my-app:${{ github.sha }}

      - name: Trivy Filesystem Scan
        run: trivy fs --format json --output trivy-results/fs.json .

      - name: Trivy Repository Scan
        run: trivy repo --format json --output trivy-results/repo.json .

      - name: Trivy IaC Scan
        run: trivy config --format json --output trivy-results/iac.json .

      - name: Trivy Secret Scan
        run: trivy fs --scanners secret --format json --output trivy-results/secret.json .

      - name: Generate SBOM from Docker image
        run: |
          mkdir -p sbom
          trivy image --format cyclonedx --output sbom/sbom.json my-app:${{ github.sha }}

      - name: Scan SBOM
        run: trivy sbom sbom/sbom.json --format json --output trivy-results/sbom.json

      - name: Convert Trivy JSON to Prometheus Metrics and Push
        run: |
          pip install requests
          python3 <<EOF
          import json, os, requests

          scan_dir = "trivy-results"
          pushgateway_url = "http://0f1dcdfc471d.mylabserver.com:9091/metrics/job/trivy_scan"

          def convert_to_prometheus_metrics(file_path):
              with open(file_path, 'r') as f:
                  try:
                      data = json.load(f)
                  except json.JSONDecodeError:
                      print(f"Skipping invalid JSON file: {file_path}")
                      return None

              metrics = []
              severity_counts = {}
              for result in data.get("Results", []):
                  for vuln in result.get("Vulnerabilities", []):
                      severity = vuln.get("Severity", "UNKNOWN")
                      severity_counts[severity] = severity_counts.get(severity, 0) + 1

              metrics.append("# HELP trivy_vulnerabilities_total Total number of vulnerabilities by severity")
              metrics.append("# TYPE trivy_vulnerabilities_total gauge")
              for severity, count in severity_counts.items():
                  metrics.append(f'trivy_vulnerabilities_total{{severity="{severity}"}} {count}')

              return "\\n".join(metrics)

          for filename in os.listdir(scan_dir):
              if filename.endswith(".json"):
                  file_path = os.path.join(scan_dir, filename)
                  metrics_data = convert_to_prometheus_metrics(file_path)
                  if metrics_data:
                      response = requests.post(pushgateway_url, data=metrics_data.encode('utf-8'))
                      print(f"Pushed metrics from {filename} with status code {response.status_code}")
          EOF

      - name: Show Summary of Trivy Scan Results
        run: |
          echo "🔍 Trivy Scan Summary:"
          for file in trivy-results/*.json; do
            echo "📄 Summary for $file:"
            jq '[.Results[]?.Vulnerabilities[]? | .Severity] | group_by(.) | map({(.[0]): length}) | add' "$file"
            echo ""
          done

      - name: Upload SBOM Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-report
          path: sbom/sbom.json

      - name: Upload Trivy Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: |
            trivy-results/
            sbom/
